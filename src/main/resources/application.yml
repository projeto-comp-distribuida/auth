spring:
  application:
    name: auth-service
  
  # Configuração do DataSource (PostgreSQL)
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/distrischool_auth}
    username: ${SPRING_DATASOURCE_USERNAME:distrischool}
    password: ${SPRING_DATASOURCE_PASSWORD:distrischool123}
    driver-class-name: ${SPRING_DATASOURCE_DRIVER_CLASS_NAME:org.postgresql.Driver}
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
  
  # Configuração do JPA/Hibernate
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          time_zone: UTC
        physical_naming_strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
    open-in-view: false
  
  # Configuração do Redis
  data:
    redis:
      host: ${SPRING_REDIS_HOST:localhost}
      port: ${SPRING_REDIS_PORT:6379}
      password: ${SPRING_REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms
  
  # Configuração do Flyway
  flyway:
    enabled: ${SPRING_FLYWAY_ENABLED:true}
    locations: ${SPRING_FLYWAY_LOCATIONS:classpath:db/migration}
    baseline-on-migrate: ${SPRING_FLYWAY_BASELINE_ON_MIGRATE:true}
    validate-on-migrate: true
    clean-disabled: true
  
  # Configuração do Kafka
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: ${spring.application.name}-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: '*'
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
    
  # Configuração do Jackson
  jackson:
    default-property-inclusion: non_null
    serialization:
      write-dates-as-timestamps: false

  # Configurações do Spring Boot DevTools para Hot Reload
  devtools:
    restart:
      enabled: true
      additional-paths: src/main/java
      exclude: static/**,public/**,resources/**,META-INF/maven/**,META-INF/resources/**
    livereload:
      enabled: true
      port: 35729
    remote:
      restart:
        enabled: true

server:
  port: ${SERVER_PORT:8080}
  shutdown: graceful

# Configuração do gRPC
grpc:
  server:
    port: ${GRPC_SERVER_PORT:9090}
    shutdown-grace-period: 30s
  client:
    auth-service:
      address: 'static://localhost:9090'
      negotiation-type: plaintext
      enable-keep-alive: true
      keep-alive-without-calls: true
      max-inbound-message-size: 4194304

# Configurações do Actuator
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true
  health:
    livenessState:
      enabled: true
    readinessState:
      enabled: true

# Configurações de Resilience4j
resilience4j:
  circuitbreaker:
    instances:
      default:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 5s
        failure-rate-threshold: 50
        event-consumer-buffer-size: 10
  retry:
    instances:
      default:
        max-attempts: 3
        wait-duration: 1000ms
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 2

# Logging
logging:
  level:
    com.distrischool: DEBUG
    org.springframework.kafka: INFO
    org.springframework.cloud: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Configurações customizadas do microserviço
microservice:
  name: ${spring.application.name}
  version: 1.0.0
  kafka:
    topics:
      # Tópicos específicos de autenticação
      auth-user-created: distrischool.auth.user.created
      auth-user-logged: distrischool.auth.user.logged
      auth-user-updated: distrischool.auth.user.updated
      auth-user-deactivated: distrischool.auth.user.deactivated
      auth-password-changed: distrischool.auth.user.password.changed
      
      # Tópicos de eventos gerais (para compatibilidade)
      user-created: distrischool.user.created
      user-logged: distrischool.user.logged
      user-updated: distrischool.user.updated
      user-deleted: distrischool.user.deleted
      
      # Tópicos de exemplo (para KafkaConfig)
      example-event: distrischool.example.event
      example-command: distrischool.example.command

# Configurações de autenticação
app:
  auth:
    # Configurações Auth0 (OAuth2) - Auth0 gerencia completamente os JWT tokens
    # Auth0 handles: passwords, email verification, password reset, MFA, login attempts
    auth0:
      enabled: ${AUTH0_ENABLED:false}
      domain: ${AUTH0_DOMAIN}
      client-id: ${AUTH0_CLIENT_ID}
      client-secret: ${AUTH0_CLIENT_SECRET}
      audience: ${AUTH0_AUDIENCE}
      connection: ${AUTH0_CONNECTION:Username-Password-Authentication}
    
    # CORS
    allowed-origins: ${ALLOWED_ORIGINS:http://localhost:3000,http://localhost:5173}